{"version":3,"sources":["components/Cards/cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountrySelection/Countries.jsx","images/image.png","App.js","index.js","App.module.css","components/Chart/chart.module.css","components/CountrySelection/countySelection.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","s","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toLocaleDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","Countries","handleCountyChange","fetchedCountries","setFetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","setData","setCountry","getData","fetchedData","src","covid","image","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93eeedf6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__20HSP\",\"card\":\"cards_card__3UreD\",\"infected\":\"cards_infected__2GxDy\",\"recovered\":\"cards_recovered__2z1Yh\",\"deaths\":\"cards_deaths__2WjQc\"};","import {Card, CardContent, Typography, Grid} from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\n\nimport cx from 'classnames';\nimport s from './cards.module.css';\n\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\n    if(!confirmed) {\n        return 'Loading...'\n    }\n    console.log()\n    return <div className={s.container}>\n        <Grid container spacing={3} justify=\"center\">\n            <Grid item component={Card} xs={12} md={3} className={cx(s.card, s.infected)}>\n                <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom>Инфецировано</Typography>\n                    <Typography variant=\"h5\">\n                        <CountUp\n                        start={0}\n                        end={confirmed.value}\n                        duration={2.5}\n                        separator={','}\n                        />\n                    </Typography>\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toLocaleDateString()}</Typography>\n                    <Typography variant=\"body2\">Число заболевших на COVID-19</Typography>\n                </CardContent>\n            </Grid>\n            <Grid item component={Card} xs={12} md={3} className={cx(s.card, s.recovered)}>\n                <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom>Выздоровело</Typography>\n                    <Typography variant=\"h5\"> <CountUp\n                        start={0}\n                        end={recovered.value}\n                        duration={2.5}\n                        separator={','}\n                    /></Typography>\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toLocaleDateString()}</Typography>\n                    <Typography variant=\"body2\">Число вылечившихся от  COVID-19</Typography>\n                </CardContent>\n            </Grid>\n            <Grid item component={Card} xs={12} md={3} className={cx(s.card, s.deaths)}>\n                <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom>Летальные исходы</Typography>\n                    <Typography variant=\"h5\"> <CountUp\n                        start={0}\n                        end={deaths.value}\n                        duration={2.5}\n                        separator={','}\n                    /></Typography>\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toLocaleDateString()}</Typography>\n                    <Typography variant=\"body2\">Число умерших от  COVID-19</Typography>\n                </CardContent>\n            </Grid>\n        </Grid>\n    </div>\n}\n\nexport default Cards;","import axios from \"axios\";\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n\n    if(country) {\n        changeableUrl = `${url}/countries/${country}`\n    }\n\n    try {\n       const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(`${changeableUrl}`);\n\n    return {confirmed, recovered, deaths, lastUpdate};\n    } catch (e) {\n        console.log(e);\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try{\n    const {data} = await axios.get(`${url}/daily`);\n\n    const modifiedData = data.map((dailyData) => ({\n        confirmed: dailyData.confirmed.total,\n        deaths: dailyData.deaths.total,\n        date: dailyData.reportDate\n    }))\n    return modifiedData\n    } catch (e) {\n        console.log(e);\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const {data: {countries}} = await axios.get(`${url}/countries`);\n\n        return countries.map((country) => country.name);\n    } catch (e) {\n        console.log(e);\n    }\n}","import {useState, useEffect} from 'react';\nimport {fetchDailyData} from '../../api';\nimport {Line, Bar} from 'react-chartjs-2';\n\nimport s from './chart.module.css';\n\nconst Chart = ({data: {confirmed, recovered, deaths}, country}) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData())\n        }\n        fetchAPI();\n    }, []);\n    const lineChart = (\n       dailyData.length  ? <Line\n            data={{\n                labels: dailyData.map(({date}) => date),\n                datasets: [{\n                    data: dailyData.map(({confirmed}) => confirmed),\n                    label: 'Число инфецированых',\n                    borderColor: '#3333ff',\n                    fill:true\n                }, {\n                    data: dailyData.map(({deaths}) => deaths),\n                    label: 'Число летальных исходов',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255, 0, 0, .5)',\n                    fill:true\n                }],\n\n            }}\n        /> : null\n    );\n    const barChart = (\n      confirmed\n      ? (\n          <Bar\n              data={{\n                labels: ['Инфецировано', 'Выздоровело', 'Летальные исходы'],\n                datasets: [{\n                    label: 'Люди',\n                    backgroundColor: [\n                        'rgba(0, 0, 255, .5)',\n                        'rgba(0, 255, 0, .5)',\n                        'rgba(255, 0, 0, .5)'\n                    ],\n                    data: [confirmed.value, recovered.value, deaths.value]\n                }]\n              }}\n              options={{\n                  legend: { display: false },\n                  title: { display: true, text:`Актуальная статистика  ${country}`}\n              }}\n          />\n          ) : null\n    );\n\n    return <div className={s.container}>\n        {country ? barChart : lineChart}\n    </div>\n}\n\nexport default Chart;","import {useState, useEffect} from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core';\nimport {fetchCountries} from '../../api';\n\nimport s from './countySelection.module.css'\n\n\nconst Countries = ({handleCountyChange}) => {\n    const [fetchedCountries, setFetchCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchCountries(await fetchCountries());\n        }\n        fetchAPI();\n    }, [setFetchCountries])\n\n    return (\n        <FormControl className={s.formControl}>\n            <NativeSelect defaultValue='' onChange={(e) => handleCountyChange(e.target.value)}>\n                <option value=\"\">Весь мир</option>\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default Countries;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import {useEffect, useState} from 'react';\nimport {Cards, Chart, Countries} from './components';\nimport {fetchData} from './api'\n\nimport s from './App.module.css'\nimport covid from './images/image.png';\n\n\n\nfunction App() {\n    const [data, setData] = useState({}),\n          [country, setCountry] = useState('');\n\n    useEffect (   ()  =>  {\n       const getData = async () => {\n           setData(await fetchData())\n       }\n       getData();\n    }, [])\n\n    const handleCountyChange = async (country) => {\n        const fetchedData = await fetchData(country);\n\n      setData(fetchedData);\n      setCountry(country);\n    }\n\n    return (\n    <div className={s.container}>\n      <img src={covid} className={s.image} alt=\"COVID-19\"/>\n      <Cards data={data}/>\n      <Countries handleCountyChange={handleCountyChange}/>\n      <Chart data={data} country={country}/>\n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"chart_container__3jxo6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"countySelection_formControl__2orPN\"};"],"sourceRoot":""}